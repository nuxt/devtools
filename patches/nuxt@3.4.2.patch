diff --git a/dist/app/components/client-only.d.ts b/dist/app/components/client-only.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..f3e5977c5b6a3c778352751c967a4c8aac671739
--- /dev/null
+++ b/dist/app/components/client-only.d.ts
@@ -0,0 +1,23 @@
+import type { ComponentOptions } from 'vue';
+declare const _default: import("vue").DefineComponent<Readonly<{
+    fallbackTag?: any;
+    fallback?: any;
+    placeholder?: any;
+    placeholderTag?: any;
+}>, (props: any) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
+    [key: string]: any;
+}>[] | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
+    [key: string]: any;
+}> | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<Readonly<{
+    fallbackTag?: any;
+    fallback?: any;
+    placeholder?: any;
+    placeholderTag?: any;
+}>>>, {
+    readonly fallbackTag?: any;
+    readonly fallback?: any;
+    readonly placeholder?: any;
+    readonly placeholderTag?: any;
+}>;
+export default _default;
+export declare function createClientOnly<T extends ComponentOptions>(component: T): any;
diff --git a/dist/app/components/client-only.js b/dist/app/components/client-only.js
index 7d3ce8b5f88917c47dea84a92bd77c1e959a6f43..e5994c1175bd075056b013815642bfa174ad1d7a 100644
--- a/dist/app/components/client-only.js
+++ b/dist/app/components/client-only.js
@@ -1,75 +1,65 @@
-import { createElementBlock, createElementVNode, defineComponent, h, mergeProps, onMounted, ref } from 'vue'
-
+import { createElementBlock, createElementVNode, defineComponent, h, mergeProps, onMounted, ref } from "vue";
 export default defineComponent({
-  name: 'ClientOnly',
+  name: "ClientOnly",
   inheritAttrs: false,
   // eslint-disable-next-line vue/require-prop-types
-  props: ['fallback', 'placeholder', 'placeholderTag', 'fallbackTag'],
-  setup (_, { slots, attrs }) {
-    const mounted = ref(false)
-    onMounted(() => { mounted.value = true })
+  props: ["fallback", "placeholder", "placeholderTag", "fallbackTag"],
+  setup(_, { slots, attrs }) {
+    const mounted = ref(false);
+    onMounted(() => {
+      mounted.value = true;
+    });
     return (props) => {
-      if (mounted.value) { return slots.default?.() }
-      const slot = slots.fallback || slots.placeholder
-      if (slot) { return slot() }
-      const fallbackStr = props.fallback || props.placeholder || ''
-      const fallbackTag = props.fallbackTag || props.placeholderTag || 'span'
-      return createElementBlock(fallbackTag, attrs, fallbackStr)
-    }
+      if (mounted.value) {
+        return slots.default?.();
+      }
+      const slot = slots.fallback || slots.placeholder;
+      if (slot) {
+        return slot();
+      }
+      const fallbackStr = props.fallback || props.placeholder || "";
+      const fallbackTag = props.fallbackTag || props.placeholderTag || "span";
+      return createElementBlock(fallbackTag, attrs, fallbackStr);
+    };
   }
-})
-
-const cache = new WeakMap()
-
-export function createClientOnly (component) {
+});
+const cache = /* @__PURE__ */ new WeakMap();
+export function createClientOnly(component) {
   if (cache.has(component)) {
-    return cache.get(component)
+    return cache.get(component);
   }
-
-  const clone = { ...component }
-
+  const clone = { ...component };
   if (clone.render) {
-    // override the component render (non script setup component)
     clone.render = (ctx, ...args) => {
       if (ctx.mounted$) {
-        const res = component.render(ctx, ...args)
-        return (res.children === null || typeof res.children === 'string')
-          ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag)
-          : h(res)
+        const res = component.render(ctx, ...args);
+        return res.children === null || typeof res.children === "string" ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag) : h(res);
       } else {
-        return h('div', mergeProps(ctx.$attrs ?? ctx._.attrs, { key: 'placeholder-key' }))
+        return h("div", mergeProps(ctx.$attrs ?? ctx._.attrs, { key: "placeholder-key" }));
       }
-    }
+    };
   } else if (clone.template) {
-    // handle runtime-compiler template
     clone.template = `
       <template v-if="mounted$">${component.template}</template>
       <template v-else><div></div></template>
-    `
+    `;
   }
-
   clone.setup = (props, ctx) => {
-    const mounted$ = ref(false)
-    onMounted(() => { mounted$.value = true })
-
-    return Promise.resolve(component.setup?.(props, ctx) || {})
-      .then((setupState) => {
-        return typeof setupState !== 'function'
-          ? { ...setupState, mounted$ }
-          : (...args) => {
-              if (mounted$.value) {
-                const res = setupState(...args)
-                return (res.children === null || typeof res.children === 'string')
-                  ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag)
-                  : h(res)
-              } else {
-                return h('div', mergeProps(ctx.attrs, { key: 'placeholder-key' }))
-              }
-            }
-      })
-  }
-
-  cache.set(component, clone)
-
-  return clone
+    const mounted$ = ref(false);
+    onMounted(() => {
+      mounted$.value = true;
+    });
+    return Promise.resolve(component.setup?.(props, ctx) || {}).then((setupState) => {
+      return typeof setupState !== "function" ? { ...setupState, mounted$ } : (...args) => {
+        if (mounted$.value) {
+          const res = setupState(...args);
+          return res.children === null || typeof res.children === "string" ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag) : h(res);
+        } else {
+          return h("div", mergeProps(ctx.attrs, { key: "placeholder-key" }));
+        }
+      };
+    });
+  };
+  cache.set(component, clone);
+  return clone;
 }
diff --git a/dist/app/components/nuxt-island.d.ts b/dist/app/components/nuxt-island.d.ts
index 93d2edeb243c72713067d1d4401fb21ab78deb88..22ca2670a1d45a1a04a8522ac37d101fef81e436 100644
--- a/dist/app/components/nuxt-island.d.ts
+++ b/dist/app/components/nuxt-island.d.ts
@@ -1,3 +1,4 @@
+import type { RendererNode } from 'vue';
 declare const _default: import("vue").DefineComponent<{
     name: {
         type: StringConstructor;
@@ -11,7 +12,7 @@ declare const _default: import("vue").DefineComponent<{
         type: ObjectConstructor;
         default: () => {};
     };
-}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
+}, () => import("vue").VNode<RendererNode, import("vue").RendererElement, {
     [key: string]: any;
 }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
     name: {
diff --git a/dist/app/components/nuxt-island.js b/dist/app/components/nuxt-island.js
index 80c152f98f337124bb3d54e6b5da2a53238daca4..70ca534036845f602f1afe5e3dae9964b6cca6dc 100644
--- a/dist/app/components/nuxt-island.js
+++ b/dist/app/components/nuxt-island.js
@@ -1,4 +1,4 @@
-import { computed, createStaticVNode, defineComponent, getCurrentInstance, ref, watch } from "vue";
+import { computed, createStaticVNode, defineComponent, getCurrentInstance, h, ref, watch } from "vue";
 import { debounce } from "perfect-debounce";
 import { hash } from "ohash";
 import { appendHeader } from "h3";
@@ -27,7 +27,7 @@ export default defineComponent({
     const hashId = computed(() => hash([props.name, props.props, props.context]));
     const instance = getCurrentInstance();
     const event = useRequestEvent();
-    const html = ref(process.client ? instance.vnode.el?.outerHTML ?? "<div></div>" : "<div></div>");
+    const html = ref(process.client ? getFragmentHTML(instance?.vnode?.el).join("") ?? "<div></div>" : "<div></div>");
     const cHead = ref({ link: [], style: [] });
     useHead(cHead);
     function _fetchComponent() {
@@ -42,6 +42,7 @@ export default defineComponent({
         }
       });
     }
+    const key = ref(0);
     async function fetchComponent() {
       nuxtApp[pKey] = nuxtApp[pKey] || {};
       if (!nuxtApp[pKey][hashId.value]) {
@@ -53,6 +54,7 @@ export default defineComponent({
       cHead.value.link = res.head.link;
       cHead.value.style = res.head.style;
       html.value = res.html;
+      key.value++;
     }
     if (process.client) {
       watch(props, debounce(fetchComponent, 100));
@@ -60,6 +62,34 @@ export default defineComponent({
     if (process.server || !nuxtApp.isHydrating) {
       await fetchComponent();
     }
-    return () => createStaticVNode(html.value, 1);
+    return () => h((_, { slots }) => slots.default?.(), { key: key.value }, {
+      default: () => [createStaticVNode(html.value, 1)]
+    });
   }
 });
+function getFragmentHTML(element) {
+  if (element) {
+    if (element.nodeName === "#comment" && element.nodeValue === "[") {
+      return getFragmentChildren(element);
+    }
+    return [element.outerHTML];
+  }
+  return [];
+}
+function getFragmentChildren(element, blocks = []) {
+  if (element && element.nodeName) {
+    if (isEndFragment(element)) {
+      return blocks;
+    } else if (!isStartFragment(element)) {
+      blocks.push(element.outerHTML);
+    }
+    getFragmentChildren(element.nextSibling, blocks);
+  }
+  return blocks;
+}
+function isStartFragment(element) {
+  return element.nodeName === "#comment" && element.nodeValue === "[";
+}
+function isEndFragment(element) {
+  return element.nodeName === "#comment" && element.nodeValue === "]";
+}
diff --git a/dist/components/runtime/server-component.js b/dist/components/runtime/server-component.js
index c0c49754cd4dce0bc38270573a59d7cdb367105c..c26554073b7508986062d3180498c632849bfce7 100644
--- a/dist/components/runtime/server-component.js
+++ b/dist/components/runtime/server-component.js
@@ -1,4 +1,4 @@
-import { computed, createStaticVNode, defineComponent, h, watch } from "vue";
+import { Fragment, computed, createStaticVNode, createVNode, defineComponent, h, ref, watch } from "vue";
 import { debounce } from "perfect-debounce";
 import { hash } from "ohash";
 import { appendHeader } from "h3";
@@ -37,6 +37,7 @@ const NuxtServerComponent = defineComponent({
   },
   async setup(props) {
     const nuxtApp = useNuxtApp();
+    const key = ref(0);
     const hashId = computed(() => hash([props.name, props.props, props.context]));
     const event = useRequestEvent();
     function _fetchComponent() {
@@ -82,9 +83,12 @@ const NuxtServerComponent = defineComponent({
     );
     useHead(() => res.data.value.head);
     if (process.client) {
-      watch(props, debounce(() => res.execute(), 100));
+      watch(props, debounce(async () => {
+        await res.execute();
+        key.value++;
+      }, 100));
     }
     await res;
-    return () => createStaticVNode(res.data.value.html, 1);
+    return () => createVNode(Fragment, { key: key.value }, [createStaticVNode(res.data.value.html, 1)]);
   }
 });
diff --git a/dist/index.mjs b/dist/index.mjs
index 87806e0daebe0c457f7efb5fb00a182f95c109a5..1025eb13592b2df44b1329ccfe95dc6192164c8c 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -2007,7 +2007,7 @@ async function initNitro(nuxt) {
     analyze: nuxt.options.build.analyze && {
       template: "treemap",
       projectRoot: nuxt.options.rootDir,
-      filename: join(nuxt.options.rootDir, ".nuxt/stats", "{name}.html")
+      filename: join(nuxt.options.analyzeDir, "{name}.html")
     },
     scanDirs: nuxt.options._layers.map((layer) => (layer.config.serverDir || layer.config.srcDir) && resolve(layer.cwd, layer.config.serverDir || resolve(layer.config.srcDir, "server"))).filter(Boolean),
     renderer: resolve(distDir, "core/runtime/nitro/renderer"),
@@ -3148,7 +3148,9 @@ async function watch(nuxt) {
           ]
         });
         watcher2.then((subscription) => {
-          console.timeEnd("[nuxt] builder:parcel:watch");
+          if (nuxt.options.debug) {
+            console.timeEnd("[nuxt] builder:parcel:watch");
+          }
           nuxt.hook("close", () => subscription.unsubscribe());
         });
       }
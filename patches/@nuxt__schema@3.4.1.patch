diff --git a/dist/index.d.ts b/dist/index.d.ts
index 6f93104d72b971925f8e0b5d51e0a433657d3e08..c65d08bca6ab58f5de2fef9de830eaac142f9686 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -20,6 +20,7 @@ import { PluginVisualizerOptions } from 'rollup-plugin-visualizer';
 import { PluginOptions } from 'mini-css-extract-plugin';
 import { BasePluginOptions, DefinedDefaultMinimizerAndOptions } from 'terser-webpack-plugin';
 import { BasePluginOptions as BasePluginOptions$1, DefinedDefaultMinimizerAndOptions as DefinedDefaultMinimizerAndOptions$1 } from 'css-minimizer-webpack-plugin';
+import { ProcessOptions } from 'postcss';
 import { Options } from 'webpack-dev-middleware';
 import { IncomingMessage, ServerResponse } from 'http';
 import { MiddlewareOptions, ClientOptions } from 'webpack-hot-middleware';
@@ -537,6 +538,14 @@ interface ImportPresetWithDeprecation extends InlinePreset {
 interface GenerateAppOptions {
     filter?: (template: ResolvedNuxtTemplate<any>) => boolean;
 }
+interface NuxtAnalyzeMeta {
+    name: string;
+    startTime: number;
+    endTime: number;
+    analyzeDir: string;
+    buildDir: string;
+    outDir: string;
+}
 /**
  * The listeners to Nuxt build time events
  */
@@ -614,6 +623,12 @@ interface NuxtHooks {
      * @returns Promise
      */
     'build:manifest': (manifest: Manifest) => HookResult;
+    /**
+     * Called when `nuxt analyze` is finished
+     * @param meta the analyze meta object, mutations will be saved to `meta.json`
+     * @returns Promise
+     */
+    'build:analyze:done': (meta: NuxtAnalyzeMeta) => HookResult;
     /**
      * Called before generating the app.
      * @param options GenerateAppOptions object
@@ -1396,7 +1411,7 @@ interface ConfigSchema {
   * The configuration path is relative to `options.rootDir` (default is current working directory).
   * Setting this field may be necessary if your project is organized as a yarn workspace-styled mono-repository.
   * 
-  * @default ["/<rootDir>/node_modules","/Users/daniel/code/nuxt.js/packages/schema/node_modules"]
+  * @default ["/<rootDir>/node_modules","/Users/antfu/i/nuxt/packages/schema/node_modules"]
   * 
   * @example
   * ```js
@@ -1407,6 +1422,15 @@ interface ConfigSchema {
  */
  modulesDir: Array<string>,
 
+ /**
+  * The directory where Nuxt will store the generated files when running `nuxt analyze`.
+  * 
+  * If a relative path is specified, it will be relative to your `rootDir`.
+  * 
+  * @default "/<rootDir>/.nuxt/analyze"
+ */
+ analyzeDir: string,
+
  /**
   * Whether Nuxt is running in development mode.
   * 
@@ -2435,24 +2459,7 @@ interface ConfigSchema {
    * Customize PostCSS Loader. Same options as https://github.com/webpack-contrib/postcss-loader#options
    * 
   */
-  postcss: {
-   execute: any,
-
-   postcssOptions: {
-    config: any,
-
-    plugins: {
-     [key: string]: any
-    },
-   },
-
-   sourceMap: any,
-
-   implementation: any,
-
-   /** @default "" */
-   order: string,
-  },
+  postcss: { execute?: boolean, postcssOptions: ProcessOptions, sourceMap?: boolean, implementation?: any },
 
   /**
    * See [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) for available options.
@@ -2610,4 +2617,4 @@ declare const _default: {
     [x: string]: untyped_dist_types_a20127ea.a | untyped_dist_types_a20127ea.J | untyped_dist_types_a20127ea.I;
 };
 
-export { AppConfig, AppConfigInput, AppHeadMetaObject, Component, ComponentsDir, ComponentsOptions, CustomAppConfig, GenerateAppOptions, HeadAugmentations, HookResult, ImportPresetWithDeprecation, ImportsOptions, MetaObject, MetaObjectRaw, ModuleDefinition, ModuleMeta, ModuleOptions, ModuleSetupReturn, Nuxt, NuxtApp, NuxtAppConfig, NuxtCompatibility, NuxtCompatibilityIssue, NuxtCompatibilityIssues, NuxtConfig, NuxtConfigLayer, _default as NuxtConfigSchema, NuxtHookName, NuxtHooks, NuxtLayout, NuxtMiddleware, NuxtModule, NuxtOptions, NuxtPage, NuxtPlugin, NuxtPluginTemplate, NuxtTemplate, PublicRuntimeConfig, ResolvedNuxtTemplate, RouterConfig, RouterConfigSerializable, RouterOptions, RuntimeConfig, RuntimeValue, ScanDir, TSReference, ViteConfig, WatchEvent };
+export { AppConfig, AppConfigInput, AppHeadMetaObject, Component, ComponentsDir, ComponentsOptions, CustomAppConfig, GenerateAppOptions, HeadAugmentations, HookResult, ImportPresetWithDeprecation, ImportsOptions, MetaObject, MetaObjectRaw, ModuleDefinition, ModuleMeta, ModuleOptions, ModuleSetupReturn, Nuxt, NuxtAnalyzeMeta, NuxtApp, NuxtAppConfig, NuxtCompatibility, NuxtCompatibilityIssue, NuxtCompatibilityIssues, NuxtConfig, NuxtConfigLayer, _default as NuxtConfigSchema, NuxtHookName, NuxtHooks, NuxtLayout, NuxtMiddleware, NuxtModule, NuxtOptions, NuxtPage, NuxtPlugin, NuxtPluginTemplate, NuxtTemplate, PublicRuntimeConfig, ResolvedNuxtTemplate, RouterConfig, RouterConfigSerializable, RouterOptions, RuntimeConfig, RuntimeValue, ScanDir, TSReference, ViteConfig, WatchEvent };
diff --git a/dist/index.mjs b/dist/index.mjs
index 7f89a32faaf83ccd20b0a299b4db1d112bb8fc00..184f2a52ed138796c8d95d7c94a6853c86834ca6 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -382,10 +382,11 @@ const build = defineUntypedSchema({
           return val ?? false;
         }
         const rootDir = await get("rootDir");
+        const analyzeDir = await get("analyzeDir");
         return {
           template: "treemap",
           projectRoot: rootDir,
-          filename: join(rootDir, ".nuxt/stats", "{name}.html")
+          filename: join(analyzeDir, "{name}.html")
         };
       }
     }
@@ -569,20 +570,20 @@ const common = defineUntypedSchema({
     $resolve: async (val, get) => resolve(await get("rootDir"), val || ".nuxt")
   },
   /**
-  * Used to set the modules directories for path resolving (for example, webpack's
-  * `resolveLoading`, `nodeExternals` and `postcss`).
-  *
-  * The configuration path is relative to `options.rootDir` (default is current working directory).
-  *
-  * Setting this field may be necessary if your project is organized as a yarn workspace-styled mono-repository.
-  *
-  * @example
-  * ```js
-  * export default {
-  *   modulesDir: ['../../node_modules']
-  * }
-  * ```
-  */
+   * Used to set the modules directories for path resolving (for example, webpack's
+   * `resolveLoading`, `nodeExternals` and `postcss`).
+   *
+   * The configuration path is relative to `options.rootDir` (default is current working directory).
+   *
+   * Setting this field may be necessary if your project is organized as a yarn workspace-styled mono-repository.
+   *
+   * @example
+   * ```js
+   * export default {
+   *   modulesDir: ['../../node_modules']
+   * }
+   * ```
+   */
   modulesDir: {
     $default: ["node_modules"],
     $resolve: async (val, get) => [
@@ -590,6 +591,14 @@ const common = defineUntypedSchema({
       resolve(process.cwd(), "node_modules")
     ]
   },
+  /**
+   * The directory where Nuxt will store the generated files when running `nuxt analyze`.
+   *
+   * If a relative path is specified, it will be relative to your `rootDir`.
+   */
+  analyzeDir: {
+    $resolve: async (val, get) => resolve(await get("rootDir"), val || ".nuxt/analyze")
+  },
   /**
    * Whether Nuxt is running in development mode.
    *
@@ -1372,6 +1381,14 @@ const vite = defineUntypedSchema({
       emptyOutDir: false
     },
     server: {
+      watch: {
+        ignored: {
+          $resolve: async (val, get) => [
+            await get("analyzeDir"),
+            ...val ?? []
+          ]
+        }
+      },
       fs: {
         allow: {
           $resolve: async (val, get) => [
@@ -1409,10 +1426,11 @@ const webpack = defineUntypedSchema({
           return val ?? false;
         }
         const rootDir = await get("rootDir");
+        const analyzeDir = await get("analyzeDir");
         return {
           template: "treemap",
           projectRoot: rootDir,
-          filename: join(rootDir, ".nuxt/stats", "{name}.html")
+          filename: join(analyzeDir, "{name}.html")
         };
       }
     },
@@ -1638,9 +1656,10 @@ const webpack = defineUntypedSchema({
     /**
      * Customize PostCSS Loader.
      * Same options as https://github.com/webpack-contrib/postcss-loader#options
+     *
+     * @type {{ execute?: boolean, postcssOptions: typeof import('postcss').ProcessOptions, sourceMap?: boolean, implementation?: any }}
      */
     postcss: {
-      execute: void 0,
       postcssOptions: {
         config: {
           $resolve: async (val, get) => val ?? await get("postcss.config")
@@ -1648,10 +1667,7 @@ const webpack = defineUntypedSchema({
         plugins: {
           $resolve: async (val, get) => val ?? await get("postcss.plugins")
         }
-      },
-      sourceMap: void 0,
-      implementation: void 0,
-      order: ""
+      }
     },
     /**
      * See [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) for available options.
diff --git a/schema/config.d.ts b/schema/config.d.ts
index 588fb9905bd37abe7f05a37d45ae14f25a2dd19d..b2023484ef8d3dbfc1eb328a5f8ce5690a2d6bcf 100644
--- a/schema/config.d.ts
+++ b/schema/config.d.ts
@@ -13,6 +13,7 @@ import type { PluginOptions } from 'mini-css-extract-plugin'
 import type { BasePluginOptions, DefinedDefaultMinimizerAndOptions } from 'terser-webpack-plugin'
 import type { BasePluginOptions as BasePluginOptions0, DefinedDefaultMinimizerAndOptions as DefinedDefaultMinimizerAndOptions0 } from 'css-minimizer-webpack-plugin'
 import type { Configuration, WebpackError } from 'webpack'
+import type { ProcessOptions } from 'postcss'
 import type { Options } from 'webpack-dev-middleware'
 import type { IncomingMessage, ServerResponse } from 'http'
 import type { MiddlewareOptions, ClientOptions } from 'webpack-hot-middleware'
@@ -475,7 +476,7 @@ export interface ConfigSchema {
   * The configuration path is relative to `options.rootDir` (default is current working directory).
   * Setting this field may be necessary if your project is organized as a yarn workspace-styled mono-repository.
   * 
-  * @default ["/<rootDir>/node_modules","/Users/daniel/code/nuxt.js/packages/schema/node_modules"]
+  * @default ["/<rootDir>/node_modules","/Users/antfu/i/nuxt/packages/schema/node_modules"]
   * 
   * @example
   * ```js
@@ -486,6 +487,15 @@ export interface ConfigSchema {
  */
  modulesDir: Array<string>,
 
+ /**
+  * The directory where Nuxt will store the generated files when running `nuxt analyze`.
+  * 
+  * If a relative path is specified, it will be relative to your `rootDir`.
+  * 
+  * @default "/<rootDir>/.nuxt/analyze"
+ */
+ analyzeDir: string,
+
  /**
   * Whether Nuxt is running in development mode.
   * 
@@ -1514,24 +1524,7 @@ export interface ConfigSchema {
    * Customize PostCSS Loader. Same options as https://github.com/webpack-contrib/postcss-loader#options
    * 
   */
-  postcss: {
-   execute: any,
-
-   postcssOptions: {
-    config: any,
-
-    plugins: {
-     [key: string]: any
-    },
-   },
-
-   sourceMap: any,
-
-   implementation: any,
-
-   /** @default "" */
-   order: string,
-  },
+  postcss: { execute?: boolean, postcssOptions: ProcessOptions, sourceMap?: boolean, implementation?: any },
 
   /**
    * See [webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) for available options.
diff --git a/schema/config.defaults.json b/schema/config.defaults.json
index 18a0128cc8f529c8329632726a82ccb1805a571b..f42b24f7f3765046ef8a7816c880c50402e0fc9a 100644
--- a/schema/config.defaults.json
+++ b/schema/config.defaults.json
@@ -42,6 +42,11 @@
       "emptyOutDir": false
     },
     "server": {
+      "watch": {
+        "ignored": [
+          "/<rootDir>/.nuxt/analyze"
+        ]
+      },
       "fs": {
         "allow": [
           "/<rootDir>/.nuxt",
@@ -49,7 +54,7 @@
           "/<rootDir>",
           "/<rootDir>",
           "/<rootDir>/node_modules",
-          "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+          "/Users/antfu/i/nuxt/packages/schema/node_modules"
         ]
       }
     }
@@ -115,11 +120,12 @@
     "templates": [],
     "analyze": false
   },
+  "analyzeDir": "/<rootDir>/.nuxt/analyze",
   "buildDir": "/<rootDir>/.nuxt",
   "workspaceDir": "/<rootDir>",
   "modulesDir": [
     "/<rootDir>/node_modules",
-    "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+    "/Users/antfu/i/nuxt/packages/schema/node_modules"
   ],
   "builder": "@nuxt/vite-builder",
   "sourcemap": {
@@ -408,8 +414,7 @@
           "autoprefixer": {},
           "cssnano": true
         }
-      },
-      "order": ""
+      }
     },
     "devMiddleware": {
       "stats": "none"
diff --git a/schema/config.md b/schema/config.md
index ca09a3bc2f70caf6bd97df265b7e4a8f3b24a676..3efd278e96f73263329e9895509427e7934f601e 100644
--- a/schema/config.md
+++ b/schema/config.md
@@ -317,7 +317,7 @@ Many tools assume that `.nuxt` is a hidden directory (because it starts with a `
 
 # `modulesDir`
 - **Type**: `array`
-- **Default**: `["/<rootDir>/node_modules","/Users/daniel/code/nuxt.js/packages/schema/node_modules"]`
+- **Default**: `["/<rootDir>/node_modules","/Users/antfu/i/nuxt/packages/schema/node_modules"]`
 
 > Used to set the modules directories for path resolving (for example, webpack's `resolveLoading`, `nodeExternals` and `postcss`).
 
@@ -326,6 +326,16 @@ The configuration path is relative to `options.rootDir` (default is current work
 Setting this field may be necessary if your project is organized as a yarn workspace-styled mono-repository.
 
 
+# `analyzeDir`
+- **Type**: `string`
+- **Default**: `"/<rootDir>/.nuxt/analyze"`
+
+> The directory where Nuxt will store the generated files when running `nuxt analyze`.
+
+
+If a relative path is specified, it will be relative to your `rootDir`.
+
+
 # `dev`
 - **Type**: `boolean`
 - **Default**: `false`
@@ -985,11 +995,18 @@ We recommend instead either enabling [**Take Over Mode**](https://vuejs.org/guid
 
 ## `server`
 
+### `watch`
+
+#### `ignored`
+- **Type**: `array`
+- **Default**: `["/<rootDir>/.nuxt/analyze"]`
+
+
 ### `fs`
 
 #### `allow`
 - **Type**: `array`
-- **Default**: `["/<rootDir>/.nuxt","/<rootDir>","/<rootDir>","/<rootDir>","/<rootDir>/node_modules","/Users/daniel/code/nuxt.js/packages/schema/node_modules"]`
+- **Default**: `["/<rootDir>/.nuxt","/<rootDir>","/<rootDir>","/<rootDir>","/<rootDir>/node_modules","/Users/antfu/i/nuxt/packages/schema/node_modules"]`
 
 
 # `webpack`
@@ -1322,11 +1339,6 @@ Defaults to true when `extractCSS` is enabled.
 
 ## `postcss`
 
-### `execute`
-- **Type**: `undefined`
-- **Default**: `undefined`
-
-
 ### `postcssOptions`
 
 #### `config`
@@ -1336,21 +1348,6 @@ Defaults to true when `extractCSS` is enabled.
 
 #### `plugins`
 
-### `sourceMap`
-- **Type**: `undefined`
-- **Default**: `undefined`
-
-
-### `implementation`
-- **Type**: `undefined`
-- **Default**: `undefined`
-
-
-### `order`
-- **Type**: `string`
-- **Default**: `""`
-
-
 ## `devMiddleware`
 
 ### `stats`
diff --git a/schema/config.schema.json b/schema/config.schema.json
index 2e8e389c257e52cfb1c874ac041d0b03c8ac8231..f5b190e1ee99f9f84a9524b85f4ec3ee127ba448 100644
--- a/schema/config.schema.json
+++ b/schema/config.schema.json
@@ -751,13 +751,21 @@
       "id": "#modulesDir",
       "default": [
         "/<rootDir>/node_modules",
-        "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+        "/Users/antfu/i/nuxt/packages/schema/node_modules"
       ],
       "type": "array",
       "items": {
         "type": "string"
       }
     },
+    "analyzeDir": {
+      "title": "The directory where Nuxt will store the generated files when running `nuxt analyze`.",
+      "description": "If a relative path is specified, it will be relative to your `rootDir`.",
+      "tags": [],
+      "id": "#analyzeDir",
+      "default": "/<rootDir>/.nuxt/analyze",
+      "type": "string"
+    },
     "dev": {
       "title": "Whether Nuxt is running in development mode.",
       "description": "Normally, you should not need to set this.",
@@ -1894,6 +1902,27 @@
         "server": {
           "id": "#vite/server",
           "properties": {
+            "watch": {
+              "id": "#vite/server/watch",
+              "properties": {
+                "ignored": {
+                  "id": "#vite/server/watch/ignored",
+                  "default": [
+                    "/<rootDir>/.nuxt/analyze"
+                  ],
+                  "type": "array",
+                  "items": {
+                    "type": "string"
+                  }
+                }
+              },
+              "default": {
+                "ignored": [
+                  "/<rootDir>/.nuxt/analyze"
+                ]
+              },
+              "type": "object"
+            },
             "fs": {
               "id": "#vite/server/fs",
               "properties": {
@@ -1905,7 +1934,7 @@
                     "/<rootDir>",
                     "/<rootDir>",
                     "/<rootDir>/node_modules",
-                    "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+                    "/Users/antfu/i/nuxt/packages/schema/node_modules"
                   ],
                   "type": "array",
                   "items": {
@@ -1920,13 +1949,18 @@
                   "/<rootDir>",
                   "/<rootDir>",
                   "/<rootDir>/node_modules",
-                  "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+                  "/Users/antfu/i/nuxt/packages/schema/node_modules"
                 ]
               },
               "type": "object"
             }
           },
           "default": {
+            "watch": {
+              "ignored": [
+                "/<rootDir>/.nuxt/analyze"
+              ]
+            },
             "fs": {
               "allow": [
                 "/<rootDir>/.nuxt",
@@ -1934,7 +1968,7 @@
                 "/<rootDir>",
                 "/<rootDir>",
                 "/<rootDir>/node_modules",
-                "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+                "/Users/antfu/i/nuxt/packages/schema/node_modules"
               ]
             }
           },
@@ -1983,6 +2017,11 @@
           "emptyOutDir": false
         },
         "server": {
+          "watch": {
+            "ignored": [
+              "/<rootDir>/.nuxt/analyze"
+            ]
+          },
           "fs": {
             "allow": [
               "/<rootDir>/.nuxt",
@@ -1990,7 +2029,7 @@
               "/<rootDir>",
               "/<rootDir>",
               "/<rootDir>/node_modules",
-              "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+              "/Users/antfu/i/nuxt/packages/schema/node_modules"
             ]
           }
         }
@@ -2528,11 +2567,10 @@
           "title": "Customize PostCSS Loader. Same options as https://github.com/webpack-contrib/postcss-loader#options",
           "description": "",
           "tags": [],
+          "tsType": "{ execute?: boolean, postcssOptions: typeof import('postcss').ProcessOptions, sourceMap?: boolean, implementation?: any }",
+          "markdownType": "{ execute?: boolean, postcssOptions: PostcssProcessOptions, sourceMap?: boolean, implementation?: any }",
           "id": "#webpack/postcss",
           "properties": {
-            "execute": {
-              "id": "#webpack/postcss/execute"
-            },
             "postcssOptions": {
               "id": "#webpack/postcss/postcssOptions",
               "properties": {
@@ -2562,17 +2600,6 @@
                 }
               },
               "type": "object"
-            },
-            "sourceMap": {
-              "id": "#webpack/postcss/sourceMap"
-            },
-            "implementation": {
-              "id": "#webpack/postcss/implementation"
-            },
-            "order": {
-              "type": "string",
-              "id": "#webpack/postcss/order",
-              "default": ""
             }
           },
           "default": {
@@ -2584,8 +2611,7 @@
                 "autoprefixer": {},
                 "cssnano": true
               }
-            },
-            "order": ""
+            }
           },
           "type": "object"
         },
@@ -2727,8 +2753,7 @@
               "autoprefixer": {},
               "cssnano": true
             }
-          },
-          "order": ""
+          }
         },
         "devMiddleware": {
           "stats": "none"
@@ -2877,8 +2902,9 @@
     "buildDir": "/<rootDir>/.nuxt",
     "modulesDir": [
       "/<rootDir>/node_modules",
-      "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+      "/Users/antfu/i/nuxt/packages/schema/node_modules"
     ],
+    "analyzeDir": "/<rootDir>/.nuxt/analyze",
     "dev": false,
     "test": false,
     "debug": false,
@@ -3051,6 +3077,11 @@
         "emptyOutDir": false
       },
       "server": {
+        "watch": {
+          "ignored": [
+            "/<rootDir>/.nuxt/analyze"
+          ]
+        },
         "fs": {
           "allow": [
             "/<rootDir>/.nuxt",
@@ -3058,7 +3089,7 @@
             "/<rootDir>",
             "/<rootDir>",
             "/<rootDir>/node_modules",
-            "/Users/daniel/code/nuxt.js/packages/schema/node_modules"
+            "/Users/antfu/i/nuxt/packages/schema/node_modules"
           ]
         }
       }
@@ -3150,8 +3181,7 @@
             "autoprefixer": {},
             "cssnano": true
           }
-        },
-        "order": ""
+        }
       },
       "devMiddleware": {
         "stats": "none"
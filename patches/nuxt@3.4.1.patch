diff --git a/dist/app/composables/asyncData.d.ts b/dist/app/composables/asyncData.d.ts
index 7d89f2dfe3ad4d711a93cf02760e4a820ec32247..e6b49d7078b74aaa8cac2564cf9a87471ea4264b 100644
--- a/dist/app/composables/asyncData.d.ts
+++ b/dist/app/composables/asyncData.d.ts
@@ -1,8 +1,8 @@
 import type { Ref, WatchSource } from 'vue';
 import type { NuxtApp } from '../nuxt.js';
 export type _Transform<Input = any, Output = any> = (input: Input) => Output;
-export type PickFrom<T, K extends Array<string>> = T extends Array<any> ? T : T extends Record<string, any> ? keyof T extends K[number] ? T : Pick<T, K[number]> : T;
-export type KeysOf<T> = Array<T extends T ? keyof T extends string ? keyof T : string : never>;
+export type PickFrom<T, K extends Array<string>> = T extends Array<any> ? T : T extends Record<string, any> ? keyof T extends K[number] ? T : K[number] extends never ? T : Pick<T, K[number]> : T;
+export type KeysOf<T> = Array<T extends T ? keyof T extends string ? keyof T : never : never>;
 export type KeyOfRes<Transform extends _Transform> = KeysOf<ReturnType<Transform>>;
 export type MultiWatchSources = (WatchSource<unknown> | object)[];
 export interface AsyncDataOptions<ResT, DataT = ResT, PickKeys extends KeysOf<DataT> = KeysOf<DataT>> {
diff --git a/dist/app/composables/fetch.js b/dist/app/composables/fetch.js
index 2628d0734dc42c67766c89181f1b52a8342765f3..5086556c2fb32073bcb6f8f477c489eeae3a74cf 100644
--- a/dist/app/composables/fetch.js
+++ b/dist/app/composables/fetch.js
@@ -66,7 +66,7 @@ export function useLazyFetch(request, arg1, arg2) {
       ...opts,
       lazy: true
     },
-    // @ts-ignore
+    // @ts-expect-error we pass an extra argument with the resolved auto-key to prevent another from being injected
     autoKey
   );
 }
diff --git a/dist/app/composables/ssr.d.ts b/dist/app/composables/ssr.d.ts
index 4e498262a0a9bcfd0aaa832d8b60a606caf6ffad..b785544bbd76f94c44bfdda347f6a37c7688cdac 100644
--- a/dist/app/composables/ssr.d.ts
+++ b/dist/app/composables/ssr.d.ts
@@ -1,7 +1,9 @@
 import type { H3Event } from 'h3';
 import type { NuxtApp } from '../nuxt.js';
-export declare function useRequestHeaders<K extends string = string>(include: K[]): Record<Lowercase<K>, string | undefined>;
-export declare function useRequestHeaders(): Readonly<Record<string, string | undefined>>;
+export declare function useRequestHeaders<K extends string = string>(include: K[]): {
+    [key in Lowercase<K>]?: string;
+};
+export declare function useRequestHeaders(): Readonly<Record<string, string>>;
 export declare function useRequestEvent(nuxtApp?: NuxtApp): H3Event;
 export declare function useRequestFetch(): typeof global.$fetch;
 export declare function setResponseStatus(event: H3Event, code?: number, message?: string): void;
diff --git a/dist/app/nuxt.js b/dist/app/nuxt.js
index a6d3ae923e27c0a79f5d20e8007fa289b640d0b2..c84ca9d167cfd578e10b8c8614895967595e57a7 100644
--- a/dist/app/nuxt.js
+++ b/dist/app/nuxt.js
@@ -213,7 +213,11 @@ export function useNuxtApp() {
   if (!nuxtAppInstance) {
     const vm = getCurrentInstance();
     if (!vm) {
-      throw new Error("nuxt instance unavailable");
+      if (process.dev) {
+        throw new Error("[nuxt] A composable that requires access to the Nuxt instance was called outside of a plugin, Nuxt hook, Nuxt middleware, or Vue setup function. This is probably not a Nuxt bug. Find out more at `https://nuxt.com/docs/guide/concepts/auto-imports#using-vue-and-nuxt-composables`.");
+      } else {
+        throw new Error("[nuxt] instance unavailable");
+      }
     }
     return vm.appContext.app.$nuxt;
   }
diff --git a/dist/app/types/augments.d.ts b/dist/app/types/augments.d.ts
index 675af7443d9fdc023cd56d5557e00a587fd517a9..48439981a18e3aeb7d946d54c551b5fea2b08b60 100644
--- a/dist/app/types/augments.d.ts
+++ b/dist/app/types/augments.d.ts
@@ -22,6 +22,9 @@ declare module 'vue' {
   interface App<HostElement> {
     $nuxt: NuxtApp
   }
+  interface ComponentCustomProperties {
+    $nuxt: NuxtApp
+  }
   interface ComponentInternalInstance {
     _nuxtOnBeforeMountCbs: Function[]
   }
diff --git a/dist/index.mjs b/dist/index.mjs
index df404620b0e13b6e36aa33b8c84aff9680a37bac..ff9d47de6463ece4e56e93a0ef8cb4dd097edf3b 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -288,7 +288,7 @@ const PageMetaPlugin = createUnplugin((options) => {
         if (s.hasChanged()) {
           return {
             code: s.toString(),
-            map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+            map: options.sourcemap ? s.generateMap({ hires: true }) : void 0
           };
         }
       }
@@ -747,7 +747,7 @@ const clientFallbackAutoIdPlugin = createUnplugin((options) => {
       if (s.hasChanged()) {
         return {
           code: s.toString(),
-          map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+          map: options.sourcemap ? s.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -765,24 +765,17 @@ const createImportMagicComments = (options) => {
 const componentsPluginTemplate = {
   filename: "components.plugin.mjs",
   getContents({ options }) {
-    const globalComponents = options.getComponents().filter((c) => c.global === true);
-    return `import { defineAsyncComponent } from 'vue'
-import { defineNuxtPlugin } from '#app/nuxt'
-
-const components = ${genObjectFromRawEntries(globalComponents.map((c) => {
-      const exp = c.export === "default" ? "c.default || c" : `c['${c.export}']`;
-      const comment = createImportMagicComments(c);
-      return [c.pascalName, `defineAsyncComponent(${genDynamicImport(c.filePath, { comment })}.then(c => ${exp}))`];
-    }))}
+    return `import { defineNuxtPlugin } from '#app/nuxt'
+import { lazyGlobalComponents } from '#components'
 
 export default defineNuxtPlugin({
-  name: 'nuxt:global-components',
+  name: 'nuxt:global-components',` + (options.getComponents().filter((c) => c.global).length ? `
   setup (nuxtApp) {
-    for (const name in components) {
-      nuxtApp.vueApp.component(name, components[name])
-      nuxtApp.vueApp.component('Lazy' + name, components[name])
+    for (const name in lazyGlobalComponents) {
+      nuxtApp.vueApp.component(name, lazyGlobalComponents[name])
+      nuxtApp.vueApp.component('Lazy' + name, lazyGlobalComponents[name])
     }
-  }
+  }` : "") + `
 })
 `;
   }
@@ -813,6 +806,7 @@ const componentsTemplate = {
     return [
       ...imports,
       ...components,
+      `export const lazyGlobalComponents = ${genObjectFromRawEntries(options.getComponents().filter((c) => c.global).map((c) => [c.pascalName, `Lazy${c.pascalName}`]))}`,
       `export const componentNames = ${JSON.stringify(options.getComponents().filter((c) => !c.island).map((c) => c.pascalName))}`
     ].join("\n");
   }
@@ -952,7 +946,7 @@ const loaderPlugin = createUnplugin((options) => {
       }
       return isVueTemplate(id);
     },
-    transform(code, id) {
+    transform(code) {
       const components = options.getComponents();
       let num = 0;
       const imports = /* @__PURE__ */ new Set();
@@ -998,7 +992,7 @@ const loaderPlugin = createUnplugin((options) => {
       if (s.hasChanged()) {
         return {
           code: s.toString(),
-          map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+          map: options.sourcemap ? s.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -1030,7 +1024,7 @@ const TreeShakeTemplatePlugin = createUnplugin((options) => {
       const { pathname } = parseURL(decodeURIComponent(pathToFileURL(id).href));
       return pathname.endsWith(".vue");
     },
-    transform(code, id) {
+    transform(code) {
       const components = options.getComponents();
       if (!regexpMap.has(components)) {
         const clientOnlyComponents = components.filter((c) => c.mode === "client" && !components.some((other) => other.mode !== "client" && other.pascalName === c.pascalName && other.filePath !== resolve(distDir, "app/components/server-placeholder"))).flatMap((c) => [c.pascalName, c.kebabName.replaceAll("-", "_")]).concat(["ClientOnly", "client_only"]);
@@ -1086,7 +1080,7 @@ const TreeShakeTemplatePlugin = createUnplugin((options) => {
       if (s.hasChanged()) {
         return {
           code: s.toString(),
-          map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+          map: options.sourcemap ? s.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -1470,7 +1464,7 @@ const TransformPlugin = createUnplugin(({ ctx, options, sourcemap }) => {
       if (s.hasChanged()) {
         return {
           code: s.toString(),
-          map: sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+          map: sourcemap ? s.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -1817,7 +1811,7 @@ const UnctxTransformPlugin = createUnplugin((options) => {
         return true;
       }
     },
-    transform(code, id) {
+    transform(code) {
       if (code.startsWith(TRANSFORM_MARKER) || !transformer.shouldTransform(code)) {
         return;
       }
@@ -1825,7 +1819,7 @@ const UnctxTransformPlugin = createUnplugin((options) => {
       if (result) {
         return {
           code: TRANSFORM_MARKER + result.code,
-          map: options.sourcemap ? result.magicString.generateMap({ source: id, includeContent: true }) : void 0
+          map: options.sourcemap ? result.magicString.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -1848,7 +1842,7 @@ const TreeShakeComposablesPlugin = createUnplugin((options) => {
         return true;
       }
     },
-    transform(code, id) {
+    transform(code) {
       if (!code.match(COMPOSABLE_RE)) {
         return;
       }
@@ -1860,7 +1854,7 @@ const TreeShakeComposablesPlugin = createUnplugin((options) => {
       if (s.hasChanged()) {
         return {
           code: s.toString(),
-          map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+          map: options.sourcemap ? s.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -1879,7 +1873,7 @@ const DevOnlyPlugin = createUnplugin((options) => {
         return true;
       }
     },
-    transform(code, id) {
+    transform(code) {
       if (!code.match(DEVONLY_COMP_RE)) {
         return;
       }
@@ -1891,7 +1885,7 @@ const DevOnlyPlugin = createUnplugin((options) => {
       if (s.hasChanged()) {
         return {
           code: s.toString(),
-          map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+          map: options.sourcemap ? s.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -1950,7 +1944,7 @@ const LayerAliasingPlugin = createUnplugin((options) => {
       if (s.hasChanged()) {
         return {
           code: s.toString(),
-          map: options.sourcemap ? s.generateMap({ source: id, includeContent: true }) : void 0
+          map: options.sourcemap ? s.generateMap({ hires: true }) : void 0
         };
       }
     }
@@ -2018,7 +2012,7 @@ async function initNitro(nuxt) {
     analyze: nuxt.options.build.analyze && {
       template: "treemap",
       projectRoot: nuxt.options.rootDir,
-      filename: join(nuxt.options.rootDir, ".nuxt/stats", "{name}.html")
+      filename: join(nuxt.options.analyzeDir, "{name}.html")
     },
     scanDirs: nuxt.options._layers.map((layer) => (layer.config.serverDir || layer.config.srcDir) && resolve(layer.cwd, layer.config.serverDir || resolve(layer.config.srcDir, "server"))).filter(Boolean),
     renderer: resolve(distDir, "core/runtime/nitro/renderer"),
@@ -2944,12 +2938,10 @@ const nuxtConfigTemplate = {
 function _resolveId(id) {
   return resolvePath$1(id, {
     url: [
-      // @ts-ignore
-      global.__NUXT_PREPATHS__,
+      ...typeof global.__NUXT_PREPATHS__ === "string" ? [global.__NUXT_PREPATHS__] : global.__NUXT_PREPATHS__ || [],
       import.meta.url,
       process.cwd(),
-      // @ts-ignore
-      global.__NUXT_PATHS__
+      ...typeof global.__NUXT_PATHS__ === "string" ? [global.__NUXT_PATHS__] : global.__NUXT_PATHS__ || []
     ]
   });
 }